#PROBLEM:
#  12
#
#NAME:
#  "Highly Divisible Triangular Number"
#
#PROMPT:
#  The sequence of triangle numbers is generated by adding the natural numbers. 
#  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
#  ten terms would be: 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ... Let us list the 
#  factors of the first seven triangle numbers:
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#  We can see that 28 is the first triangle number to have over five divisors.
#  What is the value of the first triangle number to have over five hundred divisors?
#
#LINK:
#https://projecteuler.net/problem=12

def factor(n):
   factors = [1, n] # 1 and n are always factors of n
   # At sqrt(n), symmetric factor pairs just flip: a*b = b*a = ab
   for i in range(2, int(n ** 0.5) + 1):
      if n % i == 0:
	 # Save the factor, i, and it's factor pair, n / i
	 factors.append(i) 
	 factors.append(n / i)
   return factors

# Calculate the nth triangular number using the provided formula
def triangular(n):
   return ((n * (n + 1)) / 2)

i = 1
# len(factor(triangular(i))) returns the number of factors of ith triangular number
while len(factor(triangular(i))) < 501: 
   i = i + 1
print triangular(i)



